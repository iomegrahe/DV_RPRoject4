}
}
write.csv(df, paste(gsub(".csv", "", file_path3), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path3)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Survey of Starbucks Locations in the United States\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
file_path4 <- "DAIRYQUEEN.csv"
# Get rid of special characters in each column.
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path3), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path4)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Survey of Dairy Queen Locations in the United States\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
# These will be made to more resemble Tableau Parameters when we study Shiny.
KPI_Low_Max_value = 4750
KPI_Medium_Max_value = 5000
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, clarity, sum_price, round(sum_carat) as sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'03 Low\\\'
when kpi < "p2" then \\\'02 Medium\\\'
else \\\'01 High\\\'
end kpi
from (select color, clarity,
sum(price) sum_price, sum(carat) sum_carat,
sum(price) / sum(carat) kpi
from diamonds
group by color, clarity)
order by clarity;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
# df <- diamonds %>% group_by(color, clarity) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, '03 Low', ifelse(ratio <= KPI_Medium_Max_value, '02 Medium', '01 High'))) %>% rename(COLOR=color, CLARITY=clarity, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
spread(df, COLOR, SUM_PRICE) %>% View
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Diamonds Crosstab\nSUM_PRICE, SUM_CARAT, SUM_PRICE / SUM_CARAT') +
labs(x=paste("COLOR"), y=paste("CLARITY")) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_PRICE),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_CARAT),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)
# The following is equivalent to Windowing Story 5 Sheet 4 in "Crosstabs, KPIs, Barchart.twb"
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, clarity, avg_price,
avg(avg_price)
OVER (PARTITION BY clarity ) as window_avg_price
from (select color, clarity, avg(price) avg_price
from diamonds
group by color, clarity)
order by clarity;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
# df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price)) %>% rename(COLOR=color, CLARITY=clarity)
# df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE))
# df <- inner_join(df, df1, by="CLARITY")
spread(df, COLOR, AVG_PRICE) %>% View
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_wrap(~CLARITY, ncol=1) +
labs(title='Diamonds Crosstab') +
labs(x=paste("COLOR"), y=paste("AVG_PRICE")) +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE),
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue"),
position=position_identity()
) + coord_flip() +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE, label=round(AVG_PRICE)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-0.5),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE, label=round(WINDOW_AVG_PRICE)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-2),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE, label=round(AVG_PRICE - WINDOW_AVG_PRICE)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-5),
position=position_identity()
) +
layer(data=df,
mapping=aes(yintercept = WINDOW_AVG_PRICE),
geom="hline",
geom_params=list(colour="red")
)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
# The following is equivalent to KPI Story 2 Sheet 2 and Parameters Story 3 in "Crosstabs, KPIs, Barchart.twb"
# These will be made to more resemble Tableau Parameters when we study Shiny.
KPI_Low_Max_value = 4750
KPI_Medium_Max_value = 5000
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, clarity, sum_price, round(sum_carat) as sum_carat, kpi as ratio,
case
when kpi < "p1" then \\\'03 Low\\\'
when kpi < "p2" then \\\'02 Medium\\\'
else \\\'01 High\\\'
end kpi
from (select color, clarity,
sum(price) sum_price, sum(carat) sum_carat,
sum(price) / sum(carat) kpi
from diamonds
group by color, clarity)
order by clarity;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
# df <- diamonds %>% group_by(color, clarity) %>% summarize(sum_price = sum(price), sum_carat = sum(carat)) %>% mutate(ratio = sum_price / sum_carat) %>% mutate(kpi = ifelse(ratio <= KPI_Low_Max_value, '03 Low', ifelse(ratio <= KPI_Medium_Max_value, '02 Medium', '01 High'))) %>% rename(COLOR=color, CLARITY=clarity, SUM_PRICE=sum_price, SUM_CARAT=sum_carat, RATIO=ratio, KPI=kpi)
spread(df, COLOR, SUM_PRICE) %>% View
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_discrete() +
labs(title='Diamonds Crosstab\nSUM_PRICE, SUM_CARAT, SUM_PRICE / SUM_CARAT') +
labs(x=paste("COLOR"), y=paste("CLARITY")) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_PRICE),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black"),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=SUM_CARAT),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=2),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, label=round(RATIO, 2)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", vjust=4),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=CLARITY, fill=KPI),
stat="identity",
stat_params=list(),
geom="tile",
geom_params=list(alpha=0.50),
position=position_identity()
)
# The following is equivalent to Windowing Story 5 Sheet 4 in "Crosstabs, KPIs, Barchart.twb"
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", '129.152.144.84:5001/rest/native/?query=
"select color, clarity, avg_price,
avg(avg_price)
OVER (PARTITION BY clarity ) as window_avg_price
from (select color, clarity, avg(price) avg_price
from diamonds
group by color, clarity)
order by clarity;"
')),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON', p1=KPI_Low_Max_value, p2=KPI_Medium_Max_value), verbose = TRUE))); View(df)
# df <- diamonds %>% group_by(color, clarity) %>% summarize(AVG_PRICE = mean(price)) %>% rename(COLOR=color, CLARITY=clarity)
# df1 <- df %>% ungroup %>% group_by(CLARITY) %>% summarize(WINDOW_AVG_PRICE=mean(AVG_PRICE))
# df <- inner_join(df, df1, by="CLARITY")
spread(df, COLOR, AVG_PRICE) %>% View
ggplot() +
coord_cartesian() +
scale_x_discrete() +
scale_y_continuous() +
facet_wrap(~CLARITY, ncol=1) +
labs(title='Diamonds Crosstab') +
labs(x=paste("COLOR"), y=paste("AVG_PRICE")) +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE),
stat="identity",
stat_params=list(),
geom="bar",
geom_params=list(colour="blue"),
position=position_identity()
) + coord_flip() +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE, label=round(AVG_PRICE)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-0.5),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE, label=round(WINDOW_AVG_PRICE)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-2),
position=position_identity()
) +
layer(data=df,
mapping=aes(x=COLOR, y=AVG_PRICE, label=round(AVG_PRICE - WINDOW_AVG_PRICE)),
stat="identity",
stat_params=list(),
geom="text",
geom_params=list(colour="black", hjust=-5),
position=position_identity()
) +
layer(data=df,
mapping=aes(yintercept = WINDOW_AVG_PRICE),
geom="hline",
geom_params=list(colour="red")
)
require(tidyr)
require(dplyr)
require(ggplot2)
tbl_df(diamonds)
View(diamonds)
# select
select(diamonds, cut, clarity) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds;
diamonds %>% select(cut, clarity) %>% tbl_df
diamonds %>% select(., cut, clarity) %>% tbl_df
diamonds %>% select(color:price) %>% tbl_df # Equivalent SQL: none
diamonds %>% select(-cut, -clarity) %>% tbl_df # Equivalent SQL: none
x <- diamonds %>% select(cut, clarity) %>% tbl_df
x
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("~/Mine/UT/GitRepositories/DataVisualization/RWorkshop/04 Data ETL (Extract, Transform, and Load) in R/CSVs")
file_path <- "Males.csv"
df <- rename(males, tbl = table) # table is a reserved word in Oracle so rename it to tbl.
# str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Calculated KPI", "Exper", "F1", "Nr", "School", "Wage")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("~/DataVisualization/DV_RProject4/01 Data")
file_path <- "Males.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
# str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Calculated KPI", "Exper", "F1", "Nr", "School", "Wage")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
---
title: "Project 4"
author: "Jonathan Ong, E. Clarissa Anjani Gondoprawiro"
date: "October 30, 2015"
output: html_document
---
## Step 1: Load CSV File into Tableau and Oracle
*Our data represents wages and education of young males in the United States. We have a total number of 4360 observations from 1980 to 1987.
***Process*** <br/>
1. Insert csv file as a data source into Tableau <br/>
2. Load the csv file into Oracle account using a modified version of R_ETL.R. We could not do this due to problems with the server, but we've created our a modified version of R_ETL.R.
```{r, eval=FALSE}
require(tidyr)
require(dplyr)
require(ggplot2)
setwd("~/DataVisualization/DV_RProject4/01 Data")
file_path <- "Males.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
# str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Calculated KPI", "Exper", "F1", "Nr", "School", "Wage")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
```
## Step 2: Create a barchart
*The visualization below shows that higher pay in more physical jobs have a correlation with health problems.
***Process*** <br/>
1. Drag "Occupation" and "Health" into columns <br/>
2. Drag "Wage" into rows and make the measure a median <br/>
3. Drag "Health" to color <br/>
4. Add reference line for entire table <br/>
```{r, eval=FALSE}
<img src="DataVisualization/DV_RProject4/03 Visualizations/bargraph_project4.jpg" />
```
## Step 3: Create a scatterplot
*The visualization below shows that to get decent wages, people need to have between 11 to 14 years of schooling.
***Process*** <br/>
1. Drag "School" into columns <br/>
2. Drag "Wage" into rows <br/>
3. Drag "Occupation" into colors <br/>
```{r, eval=FALSE}
<img src="DataVisualization/DV_RProject4/03 Visualizations/scatterplot_project4.jpg" />
```
## Step 3: Create a crosstab
*What stood out in the data is the blacks were most experienced as laborers and farmers, as well as managers, officials and proprietors in the professional and related service industry and public administration industry compared to Hispanics, and other racial ethnicities including White people, Asians, and Native Americans.
***Process*** <br/>
1. Drag "Industry" into columns <br/>
2. Drag "Occupatoin" and "Ethnicity" into rows <br/>
3. Drag "Experience" into text and change measure into average <br/>
4. Create KPI called "Max Low KPI". Data type is float and current value is 7. <br/>
5. Create KPI called "Max Median KPI". Data type is float and current value is 10. <br/>
6. Create "Calculated KPI" with the following if statement: <br/>
if AVG([Exper]) <= [Max Low KPI] then 'Low' <br/>
elseif AVG([Exper]) <= [Max Median KPI] then 'Medium' <br/>
else 'High' <br/>
end
7. Drag Calculatd KPI to color.
```{r, eval=FALSE}
<img src="DataVisualization/DV_RProject4/03 Visualizations/crosstab_project4.jpg" />
```
